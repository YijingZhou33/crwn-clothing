{"version":3,"sources":["redux/user/user.types.js","redux/user/user.reducer.js","redux/cart/cart.types.js","redux/cart/cart.utils.js","redux/cart/cart.reducer.js","redux/directory/directory.reducer.js","redux/shop/shop.types.js","redux/shop/shop.reducer.js","redux/root-reducer.js","redux/store.js","redux/directory/directory.selectors.js","components/menu-item/menu-item.component.jsx","components/directory/directory.component.jsx","pages/homepage/homepage.styles.jsx","pages/homepage/homepage.component.jsx","redux/shop/shop.selectors.js","components/with-spinner/with-spinner.styles.jsx","components/with-spinner/with-spinner.component.jsx","components/custom-button/custom-button.styles.jsx","components/custom-button/custom-button.component.jsx","redux/cart/cart.actions.js","components/collection-item/collection-item.component.jsx","components/collection-preview/collection-preview.component.jsx","components/collections-overview/collections-overview.component.jsx","components/collections-overview/collections-overview.container.jsx","pages/collection/collection.component.jsx","pages/collection/collection.container.jsx","firebase/firebase.utils.js","redux/shop/shop.actions.js","pages/shop/shop.component.jsx","components/form-input/form-input.component.jsx","components/sign-in/sign-in.component.jsx","components/sign-up/sign-up.component.jsx","pages/sign-in-and-sign-up/sign-in-and-sign-up.component.jsx","components/checkout-item/checkout-item.component.jsx","components/stripe-button/stripte-button.component.jsx","redux/cart/cart.selectors.js","pages/checkout/checkout.component.jsx","assets/shopping-bag.svg","components/cart-icon/cart-icon.component.jsx","components/cart-item/cart-item.component.jsx","components/cart-dropdown/cart-dropdown.component.jsx","redux/user/user.selectors.js","assets/crown.svg","components/header/header.styles.jsx","components/header/header.component.jsx","App.js","redux/user/user.actions.js","index.js"],"names":["UserActionTypes","SET_CURRENT_USER","INITIAL_STATE","currentUser","userReducer","state","action","type","payload","CartActionTypes","TOGGLE_CART_HIDDEN","ADD_ITEM","REMOVE_ITEM","CLEAR_ITEM_FROM_CART","addItemToCart","cartItems","cartItemToAdd","find","cartItem","id","map","quantity","removeItemFromCart","cartItemToRemove","existingCartItem","filter","hidden","cartReducer","sections","title","imageUrl","linkUrl","size","directoryReducer","ShopActionTypes","FETCH_COLLECTIONS_START","FETCH_COLLECTIONS_SUCCESS","FETCH_COLLECTIONS_FAILURE","collections","isFetching","errorMessage","undefined","shopReducer","persistConfig","key","storage","whitelist","rootReducer","combineReducers","user","userRecuder","cart","directory","shop","persistReducer","middlewares","thunk","store","createStore","applyMiddleware","persistor","persistStore","selectDirectorySections","createSelector","withRouter","history","match","className","onClick","push","url","style","backgroundImage","toUpperCase","mapStateToProps","createStructuredSelector","connect","otherSectionProps","HomePageContainer","styled","div","HomePage","selectShop","selectCollections","selectCollectionsForPreview","Object","keys","selectCollection","memoize","collectionUrlParam","selectIsCollectionFetching","selectCollectionsLoaded","SpinnerOverlay","SpinnerContainer","withSpinner","WrappedComponent","isLoading","otherProps","buttonStyles","css","googleSignInStyles","invertedButtonStyles","CustomButtonContainer","button","props","isGoogleSignIn","inverted","CustomButton","children","toggleCartHidden","addItem","item","dispatch","name","price","items","routeName","path","index","otherCollectionProps","CollectionsOverviewContainer","compose","CollectionsOverview","ownProps","collection","params","collectionId","CollectionPageContainer","CollectionPage","createUserProfileDocument","userAuth","additionalData","a","userRef","firestore","doc","uid","get","exists","displayName","email","createAt","Date","set","console","log","message","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","provider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup","fetchCollectionsStartAsync","then","snapshot","collectionsMap","docs","docSnapshot","data","encodeURI","toLowerCase","reduce","accumulator","fetchCollectionsSuccess","catch","error","ShopPage","this","exact","component","React","Component","FormInput","handleChange","label","otherFormProps","onChange","value","length","SignIn","handleSubmit","event","preventDefault","password","signInWithEmailAndPassword","setState","target","onSubmit","required","SignUp","confirmPassword","alert","createUserWithEmailAndPassword","SignInAndSignUpPage","removeItem","clearItem","clearItemFromCart","src","alt","StripeCheckoutButton","priceForStripe","billingAddress","shippingAddress","image","description","amount","panelLabel","token","stripeKey","selectCart","selectCartItems","selectCartHidden","selectCartItemsCount","accumalatedQuantity","selectCartTotal","accumalatedTotal","total","_extends","assign","i","arguments","source","prototype","hasOwnProperty","call","apply","_objectWithoutProperties","excluded","sourceKeys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","_ref3","_ref4","_ref5","_ref6","_ref7","_ref8","_ref9","_ref10","_ref11","_ref12","_ref13","_ref14","_ref15","_ref16","SvgShoppingBag","_ref","svgRef","titleId","xmlns","xmlnsXlink","x","y","viewBox","enableBackground","xmlSpace","ref","fill","d","ForwardRef","itemCount","CartItem","selectCurrentUser","stroke","strokeWidth","fillRule","transform","points","fillOpacity","cx","cy","r","SvgCrown","width","height","HeaderContainer","LogoContainer","Link","OptionsContainer","OptionLink","to","as","signOut","App","unsubscribeFromAuth","setCurrentUser","onAuthStateChanged","onSnapshot","snapShot","CheckoutPage","render","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.146f4fe5.chunk.js","sourcesContent":["/* \r\n  Instead of hard-coding the user action type,\r\n  put it into an object and export to `user.actions.js` \r\n  and `user.reducer.js`\r\n*/\r\n\r\nconst UserActionTypes = {\r\n  SET_CURRENT_USER: \"SET_CURRENT_USER\",\r\n};\r\n\r\nexport default UserActionTypes;\r\n","/* \r\n    Store the state of current users\r\n    Reducer is a function with two props - similar to event listener\r\n      1. `state` object - current state\r\n      2. `action` object\r\n        {\r\n          type: string value represents what the specific action it is \r\n          payload: \r\n        }\r\n      3. switch \r\n\r\n    when we fire the state for the first time, there's nothing --> set an initial state \r\n    INITIAL_STATE is similar to `this.state` in Class Component \r\n    default parameter value - ES6 \r\n      parameter `state` is undefined \r\n      null is considered as a value, it will pass null as state value \r\n\r\n    every single Reducer get every single state gets fired \r\n    even if actions are not related to this reducer \r\n    if none of action.type mateches the switch statement, return state \r\n\r\n    if action.type == 'SET_CURRENT_USER', return a new state object \r\n        spread everything in the state object\r\n        modify the value we care about - action.payload\r\n\r\n    bring this into root reducer\r\n*/\r\n\r\nimport UserActionTypes from \"./user.types\";\r\n\r\nconst INITIAL_STATE = {\r\n  currentUser: null,\r\n};\r\n\r\nconst userReducer = (state = INITIAL_STATE, action) => {\r\n  // Check to see if the reducer cares about this action\r\n  switch (action.type) {\r\n    case UserActionTypes.SET_CURRENT_USER:\r\n      // If so, make a copy of `state`\r\n      return {\r\n        ...state,\r\n        // Update the copy\r\n        currentUser: action.payload,\r\n      };\r\n    default:\r\n      // Otherwise return the existing state unchanged\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default userReducer;\r\n","const CartActionTypes = {\r\n  TOGGLE_CART_HIDDEN: \"TOGGLE_CART_HIDDEN\",\r\n  ADD_ITEM: \"ADD_ITEM\",\r\n  REMOVE_ITEM: \" REMOVE_ITEM\",\r\n  CLEAR_ITEM_FROM_CART: \"CLEAR_ITEM_FROM_CART\",\r\n};\r\n\r\nexport default CartActionTypes;\r\n","/* \r\n  first parameter: the existing cartItems\r\n  second parameter: item needs to be added\r\n\r\n  Look inside the existing items to see if it exists \r\n  \r\n  array.find() will return the first elemnt found based off the\r\n  condition passed in, if not found, return undefined\r\n\r\n  array.map() will return a new array\r\n*/\r\nexport const addItemToCart = (cartItems, cartItemToAdd) => {\r\n  const existingCartItem = cartItems.find(\r\n    (cartItem) => cartItem.id === cartItemToAdd.id\r\n  );\r\n\r\n  if (existingCartItem) {\r\n    return cartItems.map((cartItem) =>\r\n      cartItem.id === cartItemToAdd.id\r\n        ? { ...cartItem, quantity: cartItem.quantity + 1 }\r\n        : cartItem\r\n    );\r\n  }\r\n\r\n  return [...cartItems, { ...cartItemToAdd, quantity: 1 }];\r\n};\r\n\r\n/* \r\n  Check if the quantity is one so we can remove it,\r\n  Otherwise decrease the quantity by one\r\n*/\r\nexport const removeItemFromCart = (cartItems, cartItemToRemove) => {\r\n  const existingCartItem = cartItems.find(\r\n    (cartItem) => cartItem.id === cartItemToRemove.id\r\n  );\r\n\r\n  if (existingCartItem.quantity === 1) {\r\n    return cartItems.filter((cartItem) => cartItem.id !== existingCartItem.id);\r\n  }\r\n\r\n  return cartItems.map((cartItem) =>\r\n    cartItem.id === cartItemToRemove.id\r\n      ? { ...cartItem, quantity: cartItem.quantity - 1 }\r\n      : cartItem\r\n  );\r\n};\r\n","/* \r\n  Trigger cart dropdown to hide and show based on clicking\r\n  on the cart icon. \r\n*/\r\n\r\nimport CartActionTypes from \"./cart.types\";\r\nimport { addItemToCart, removeItemFromCart } from \"./cart.utils\";\r\n\r\n// hide the dropdown when the app renders for the first time\r\n/* \r\n  Similar to local state inside the class component\r\n  set `cartItems` as an empty array as the default value\r\n  \r\n  Add or clear items in the array depending on the feature \r\n    Add new actions / action types \r\n\r\n  When we add items, it will increase the quantity\r\n  first, let's start with adding items into the array whenever\r\n  the user click them\r\n  deposit whatever the item it is in the payload of the\r\n  `ADD_ITEM` action, push it into `cartItems` array\r\n\r\n  Group the cartItem - add quantity property to the object \r\n  write a utils function to return a new array even if the object\r\n  stays the same but increases or decreases the prop. \r\n\r\n  dispatch a new action based on the payload to clear an cartItem \r\n  regardless of its quantity whenever we hit th remove button\r\n*/\r\nconst INITIAL_STATE = {\r\n  hidden: true,\r\n  cartItems: [],\r\n};\r\n\r\nconst cartReducer = (state = INITIAL_STATE, action) => {\r\n  switch (action.type) {\r\n    case CartActionTypes.TOGGLE_CART_HIDDEN:\r\n      return {\r\n        ...state,\r\n        hidden: !state.hidden,\r\n      };\r\n    case CartActionTypes.ADD_ITEM:\r\n      return {\r\n        ...state,\r\n        cartItems: addItemToCart(state.cartItems, action.payload),\r\n        // cartItems: [...state.cartItems, action.payload],\r\n      };\r\n    case CartActionTypes.REMOVE_ITEM:\r\n      return {\r\n        ...state,\r\n        cartItems: removeItemFromCart(state.cartItems, action.payload),\r\n      };\r\n    case CartActionTypes.CLEAR_ITEM_FROM_CART:\r\n      return {\r\n        ...state,\r\n        cartItems: state.cartItems.filter(\r\n          (cartItem) => cartItem.id !== action.payload.id\r\n        ),\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default cartReducer;\r\n","/* \r\n  Only need to store sections in the Redux store, \r\n  no need for `directory.actions.js`, `directory.types.js`...\r\n\r\n  Debate about whether or not it's worth it to keep\r\n  one-time use & unmodifiable data inside a component.\r\n    - It might be overkill to move the data only being \r\n      used in one place and not being updated into Redux.\r\n    - benefit: testing section \r\n*/\r\nconst INITIAL_STATE = {\r\n  sections: [\r\n    {\r\n      title: \"hats\",\r\n      imageUrl: \"https://i.ibb.co/cvpntL1/hats.png\",\r\n      id: 1,\r\n      linkUrl: \"shop/hats\",\r\n    },\r\n    {\r\n      title: \"jackets\",\r\n      imageUrl: \"https://i.ibb.co/px2tCc3/jackets.png\",\r\n      id: 2,\r\n      linkUrl: \"shop/jackets\",\r\n    },\r\n    {\r\n      title: \"sneakers\",\r\n      imageUrl: \"https://i.ibb.co/0jqHpnp/sneakers.png\",\r\n      id: 3,\r\n      linkUrl: \"shop/sneakers\",\r\n    },\r\n    {\r\n      title: \"womens\",\r\n      imageUrl: \"https://i.ibb.co/GCCdy8t/womens.png\",\r\n      size: \"large\",\r\n      id: 4,\r\n      linkUrl: \"shop/womens\",\r\n    },\r\n    {\r\n      title: \"mens\",\r\n      imageUrl: \"https://i.ibb.co/R70vBrQ/men.png\",\r\n      size: \"large\",\r\n      id: 5,\r\n      linkUrl: \"shop/mens\",\r\n    },\r\n  ],\r\n};\r\n\r\nconst directoryReducer = (state = INITIAL_STATE, action) => {\r\n  switch (action.type) {\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default directoryReducer;\r\n","/* \r\n  FETCH_COLLECTIONS_START: \r\n    the first API call when the app begins\r\n  FETCH_COLLECTIONS_SUCCESS:\r\n    successful API request with data \r\n  FETCH_COLLECTIONS_FAILURE:\r\n    server is down or connection is poor \r\n*/\r\nconst ShopActionTypes = {\r\n  // UPDATE_COLLECTIONS: \"UPDATE_COLLECTIONS\",\r\n  FETCH_COLLECTIONS_START: \"FETCH_COLLECTIONS_START\",\r\n  FETCH_COLLECTIONS_SUCCESS: \"FETCH_COLLECTIONS_SUCCESS\",\r\n  FETCH_COLLECTIONS_FAILURE: \"FETCH_COLLECTIONS_FAILURE\",\r\n};\r\n\r\nexport default ShopActionTypes;\r\n","import ShopActionTypes from \"./shop.types\";\r\n\r\n/* \r\n  `isFetching`: whether or not we're fetching \r\n    the data for collections prop \r\n  `errorMessage`: store the error message\r\n\r\n  Prior we had `loading` value inisde shoppage\r\n  because the component was doing the API call\r\n\r\n  Move it into Redux so the reducer needs to add the state\r\n  to indicate whether the data is fetching related to the \r\n  shop reducer. \r\n*/\r\nconst INITIAL_STATE = {\r\n  collections: null,\r\n  isFetching: false,\r\n  errorMessage: undefined,\r\n};\r\n\r\n/* \r\n  Reducer listen for the back-end updates to store the \r\n  actual collections value, we don't need INITIAL_STATE\r\n  and SHOP_DATA from the front-end. \r\n\r\n  Once we've deleted SHOP_DATA and set INITIAL_STATE to null,\r\n  there're couple of issues:\r\n    1. selector `selectCollectionForPreview` is expecting \r\n      an object exists because we can't convert null\r\n      if object doesn't exist, return an empty array\r\n    2. in the collection page, when we refresh the page, \r\n    selector `selectCollection` fails:\r\n      inside this selector, we pass in `collectionUrlParam` and\r\n      use collectionsMap object to find the corresponding collection\r\n      object\r\n      pass it to `collection.component`\r\n\r\n    3. What to do if collection object is null?\r\n      - in the selector return null\r\n      - in the component, we're getting `title` and `items` from null.\r\n        Now the app is in the state where a collection could possibly \r\n        be null because when the app first boots up and the collection \r\n        page mounts, it will try to find a collection map inside the state, \r\n        because we haven't received the data from back-end (asynchronous: it\r\n        takes time to come back to us with a response)\r\n\r\n        create a loading state - write a spinner\r\n        `shop` component is the one that will be able to know whether or not\r\n        the loading state is finished because `shop` component actually receives\r\n        and makes the call to reducer after getting the data from firestore. \r\n*/\r\n\r\nconst shopReducer = (state = INITIAL_STATE, action) => {\r\n  switch (action.type) {\r\n    case ShopActionTypes.FETCH_COLLECTIONS_START:\r\n      return {\r\n        ...state,\r\n        isFetching: true,\r\n      };\r\n    case ShopActionTypes.FETCH_COLLECTIONS_SUCCESS:\r\n      return {\r\n        ...state,\r\n        isFetching: false,\r\n        collections: action.payload,\r\n      };\r\n    case ShopActionTypes.FETCH_COLLECTIONS_FAILURE:\r\n      return {\r\n        ...state,\r\n        isFetching: false,\r\n        errorMessage: action.payload,\r\n      };\r\n    // case ShopActionTypes.UPDATE_COLLECTIONS:\r\n    //   return {\r\n    //     ...state,\r\n    //     collections: action.payload,\r\n    //   };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default shopReducer;\r\n","/* \r\n    Root reducer object represents all states of the application\r\n    combine other states together - break code up into individual sections\r\n\r\n    root reducer - combinedReducers\r\n      key: individual slice of state (actual reducer)\r\n\r\n*/\r\n\r\nimport { combineReducers } from \"redux\";\r\nimport { persistReducer } from \"redux-persist\";\r\n// actual localStorage on the browser\r\nimport storage from \"redux-persist/lib/storage\";\r\n\r\nimport userRecuder from \"./user/user.reducer\";\r\nimport cartReducer from \"./cart/cart.reducer\";\r\nimport directoryReducer from \"./directory/directory.reducer\";\r\nimport shopReducer from \"./shop/shop.reducer\";\r\n\r\n/* \r\n  JSON object of configuration for \"redux-persist\"\r\n  key: 'At what point inside the reducer object do we \r\n      want to start storing everything',\r\n  storage: storage redux-persist will use\r\n  whitelist: an array containing the string names of any of the\r\n          reducer that we want to store\r\n\r\n  We have two reducer, but `user` is handled by firebase\r\n*/\r\nconst persistConfig = {\r\n  key: \"root\",\r\n  storage,\r\n  whitelist: [\"cart\"],\r\n};\r\n\r\nconst rootReducer = combineReducers({\r\n  user: userRecuder,\r\n  cart: cartReducer,\r\n  directory: directoryReducer,\r\n  shop: shopReducer,\r\n});\r\n\r\n// persistReducer() and pass in configuration and rootReducer\r\n// modified version of rootReducer with persistence capabilities\r\nexport default persistReducer(persistConfig, rootReducer);\r\n","/* \r\n  Middleware - array: between action and root reducer \r\n    function that receives actions in, do something with them, and pass them to root reducer\r\n\r\n\r\n  Redux-logger\r\n    catch the action and console.log it \r\n\r\n  function createStore takes two props:\r\n    1. rootReducer\r\n    2. applyMiddleware \r\n      spread all of the methods in middlewares array as individual function \r\n      in this way, if we need to add more things to middleware, just add to array\r\n      more scalable \r\n\r\n  redux-persist\r\n    allow the browser to cache the store \r\n    use `presistor` to create a persisting version of store\r\n\r\n  Only apply `logger` when we in development\r\n  Inside Node, there's an enviromnment variable, \r\n  it can be set to know whether we're in production or development \r\n\r\n  yarn start -- development\r\n  yarn build (heroku) -- production\r\n\r\n  Redux-thunk -- middleware \r\n  It will catch the action and detect actions that aren't objects (should be functions),\r\n  then take dispatch function as a parameter and keep going \r\n  for exmaple, giving asynchronous action objects to the route reducer \r\n*/\r\n\r\nimport { createStore, applyMiddleware } from \"redux\";\r\nimport { persistStore } from \"redux-persist\";\r\nimport logger from \"redux-logger\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nimport rootReducer from \"./root-reducer\";\r\n\r\n// const middlewares = [logger];\r\nconst middlewares = [thunk];\r\n\r\nif (process.env.NODE_ENV === \"development\") {\r\n  middlewares.push(logger);\r\n}\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(...middlewares));\r\n\r\nexport const persistor = persistStore(store);\r\n","import { createSelector } from \"reselect\";\r\n\r\nconst selectDirectory = (state) => state.directory;\r\n\r\nexport const selectDirectorySections = createSelector(\r\n  [selectDirectory],\r\n  (directory) => directory.sections\r\n);\r\n","import React from \"react\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nimport \"./menu-item.styles.scss\";\r\n\r\n/* \r\n    Destructure value of title from props\r\n      {title} == props.title\r\n\r\n    Style property takes an object that has props value == CSS\r\n      style={{ backgroundImage: `url(${imageUrl})` }}\r\n      - Dynamically make styles on the components \r\n      - JavaScript template string: `url${...}` \r\n        https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals\r\n\r\n    Also can pass in className using template string\r\n\r\n    Transition\r\n      - Create a <div> to hold the background image. \r\n      - The effect get bigger within the div when hovering over. \r\n      - But the size of content stays the same. \r\n*/\r\n\r\nconst MenuItem = ({ title, imageUrl, size, linkUrl, history, match }) => (\r\n  <div\r\n    className={`${size} menu-item`}\r\n    onClick={() => {\r\n      history.push(`${match.url}${linkUrl}`);\r\n    }}>\r\n    <div\r\n      className='background-image'\r\n      style={{ backgroundImage: `url(${imageUrl})` }}></div>\r\n    <div className='content'>\r\n      <h1 className='title'>{title.toUpperCase()}</h1>\r\n      <span className='subtitle'>SHOP NOW</span>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default withRouter(MenuItem);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { createStructuredSelector } from \"reselect\";\r\n\r\nimport { selectDirectorySections } from \"../../redux/directory/directory.selectors\";\r\n\r\nimport MenuItem from \"../menu-item/menu-item.component\";\r\n\r\nimport \"./directory.styles.scss\";\r\n\r\n/* \r\n    Class componnet - Store state value to populate menu-item components\r\n      sections(menu-item): an array of object - title, imageUrl\r\n\r\n    Keep `section` in `this.state` --> Move into Redux store \r\n    because there're possibility to move these sections into \r\n    more than one component\r\n*/\r\n// class Directory extends React.Component {\r\n//   constructor() {\r\n//     super();\r\n//     this.state = {\r\n//       sections: [\r\n//         {\r\n//           title: \"hats\",\r\n//           imageUrl: \"https://i.ibb.co/cvpntL1/hats.png\",\r\n//           id: 1,\r\n//           linkUrl: \"shop/hats\",\r\n//         },\r\n//         {\r\n//           title: \"jackets\",\r\n//           imageUrl: \"https://i.ibb.co/px2tCc3/jackets.png\",\r\n//           id: 2,\r\n//           linkUrl: \"shop/jackets\",\r\n//         },\r\n//         {\r\n//           title: \"sneakers\",\r\n//           imageUrl: \"https://i.ibb.co/0jqHpnp/sneakers.png\",\r\n//           id: 3,\r\n//           linkUrl: \"shop/sneakers\",\r\n//         },\r\n//         {\r\n//           title: \"womens\",\r\n//           imageUrl: \"https://i.ibb.co/GCCdy8t/womens.png\",\r\n//           size: \"large\",\r\n//           id: 4,\r\n//           linkUrl: \"shop/womens\",\r\n//         },\r\n//         {\r\n//           title: \"mens\",\r\n//           imageUrl: \"https://i.ibb.co/R70vBrQ/men.png\",\r\n//           size: \"large\",\r\n//           id: 5,\r\n//           linkUrl: \"shop/mens\",\r\n//         },\r\n//       ],\r\n//     };\r\n//   }\r\n\r\n//   render() {\r\n//     return (\r\n//       <div className='directory-menu'>\r\n//         {this.state.sections.map(({ id, ...otherSectionProps }) => (\r\n//           <MenuItem key={id} {...otherSectionProps} />\r\n//         ))}\r\n//       </div>\r\n//     );\r\n//   }\r\n// }\r\n\r\nconst Directory = ({ sections }) => (\r\n  <div className='directory-menu'>\r\n    {sections.map(({ id, ...otherSectionProps }) => (\r\n      <MenuItem key={id} {...otherSectionProps} />\r\n    ))}\r\n  </div>\r\n);\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n  sections: selectDirectorySections,\r\n});\r\n\r\nexport default connect(mapStateToProps)(Directory);\r\n","import styled from \"styled-components\";\r\n\r\n// create HomePage component and copy styles\r\n// from scss file\r\nexport const HomePageContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  padding: 20px 80px;\r\n`;\r\n","import React from \"react\";\r\n\r\nimport Directory from \"../../components/directory/directory.component\";\r\n\r\nimport { HomePageContainer } from \"./homepage.styles\";\r\n\r\nconst HomePage = () => (\r\n  <HomePageContainer>\r\n    <Directory />\r\n  </HomePageContainer>\r\n);\r\n\r\nexport default HomePage;\r\n","import { createSelector } from \"reselect\";\r\nimport memoize from \"lodash.memoize\";\r\n\r\n/* \r\n  use `match.params.collectionId` to get the collection -- string\r\n  id is number\r\n\r\n  collections: [\r\n    {id: 1, items:[], routeName: 'hats', title: 'Hats'}, \r\n    ...\r\n  ]\r\n\r\n  1. map the string value to the respective ID\r\n*/\r\n\r\n// const COLLECTION_ID_MAP = {\r\n//   hats: 1,\r\n//   sneakers: 2,\r\n//   jackets: 3,\r\n//   womens: 4,\r\n//   mens: 5,\r\n// };\r\n\r\nconst selectShop = (state) => state.shop;\r\n\r\nexport const selectCollections = createSelector(\r\n  [selectShop],\r\n  (shop) => shop.collections\r\n);\r\n\r\n/* \r\n  convert object into array\r\n  \r\n  `Object.keys()` will get all the keys and put into an array\r\n  const testObject = {'a': 1, 'b': 2, 'c': 3}\r\n  Object.keys(testObject) // ['a', 'b', 'c']\r\n  return [{id, title, routeName, items:[]}, {}, {}, {}, {}]\r\n*/\r\nexport const selectCollectionsForPreview = createSelector(\r\n  [selectCollections],\r\n  (collections) =>\r\n    collections ? Object.keys(collections).map((key) => collections[key]) : []\r\n);\r\n\r\n/* \r\n  Find `collection.id` matching the url parameter of `COLLECTION_ID_MAP`\r\n  Curry function: a function returns another function\r\n  The function returned is `createSelector`\r\n\r\n  `selectCollection` function is not memoized due to \r\n  `collectionUrlParam` being passed in from collection component's\r\n  `mapStateToProps` running whenever the state changes and calling \r\n  a new instance of `selectColleciton` function. \r\n\r\n  In this case, `collectionUrlParam` is a dynamic argument, so\r\n  we need to memorize the whole `selectCollection` function.\r\n\r\n  Similar to reselect, `Memoize` memorizes the return of `selectCollection`, \r\n  which is a selector. If this function gets called again with the \r\n  same `collectionUrlParam`, don't return this function because we've memorized\r\n  , just return the selector\r\n  \r\n  The issue of doing `Array.find()` is that we're passing this function on \r\n  every element in the array from left to right.\r\n  If we have a collections with thousand items and we're looking for the last one,\r\n  it takes too long to loop through all the elements\r\n\r\n  Data normalization: Store lists of elements inside an object (hash table)\r\n  set the key as the `Urlparam` and the key itself should exist inside the \r\n  item, usually it would be id\r\n\r\n\r\n*/\r\nexport const selectCollection = memoize((collectionUrlParam) =>\r\n  createSelector(\r\n    [selectCollections],\r\n    // (collections) => collections.find(\r\n    //   (collection) => collection.id === COLLECTION_ID_MAP[collectionUrlParam]\r\n    // )\r\n    (collections) => (collections ? collections[collectionUrlParam] : null)\r\n  )\r\n);\r\n\r\nexport const selectIsCollectionFetching = createSelector(\r\n  [selectShop],\r\n  (shop) => shop.isFetching\r\n);\r\n\r\n// convert an object into boolean\r\n// if collections is loaded, return true\r\nexport const selectCollectionsLoaded = createSelector(\r\n  [selectCollections],\r\n  (collections) => !!collections\r\n);\r\n","import styled from 'styled-components';\n\nexport const SpinnerOverlay = styled.div`\n  height: 60vh;\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nexport const SpinnerContainer = styled.div`\n  display: inline-block;\n  width: 50px;\n  height: 50px;\n  border: 3px solid rgba(195, 195, 195, 0.6);\n  border-radius: 50%;\n  border-top-color: #636767;\n  animation: spin 1s ease-in-out infinite;\n  -webkit-animation: spin 1s ease-in-out infinite;\n  @keyframes spin {\n    to {\n      -webkit-transform: rotate(360deg);\n    }\n  }\n  @-webkit-keyframes spin {\n    to {\n      -webkit-transform: rotate(360deg);\n    }\n  }\n`;\n","import React from \"react\";\r\n\r\nimport { SpinnerOverlay, SpinnerContainer } from \"./with-spinner.styles\";\r\n\r\n/* \r\n  higher order component returns a functional component `Spinner`\r\n  `isLoading` - boolean\r\n    true: render Spinnercomponent\r\n    false: render `WrappedComponent` with props except isLoading\r\n*/\r\nconst withSpinner = (WrappedComponent) => {\r\n  const Spinner = ({ isLoading, ...otherProps }) => {\r\n    return isLoading ? (\r\n      <SpinnerOverlay>\r\n        <SpinnerContainer />\r\n      </SpinnerOverlay>\r\n    ) : (\r\n      <WrappedComponent {...otherProps} />\r\n    );\r\n  };\r\n  return Spinner;\r\n};\r\n\r\nexport default withSpinner;\r\n","import styled, { css } from \"styled-components\";\r\n\r\n/* \r\n  Won't render different component, \r\n  call a function to render different styles inside the component \r\n  with CSS block\r\n*/\r\n\r\nconst buttonStyles = css`\r\n  background-color: black;\r\n  color: white;\r\n  border: none;\r\n\r\n  &:hover {\r\n    background-color: white;\r\n    color: black;\r\n    border: 1px solid black;\r\n  }\r\n`;\r\n\r\nconst googleSignInStyles = css`\r\n  background-color: #4285f4;\r\n  color: white;\r\n\r\n  &:hover {\r\n    background-color: #357ae8;\r\n    border: none;\r\n  }\r\n`;\r\n\r\nconst invertedButtonStyles = css`\r\n  background-color: white;\r\n  color: black;\r\n  border: 1px solid black;\r\n\r\n  &:hover {\r\n    background-color: black;\r\n    color: white;\r\n    border: none;\r\n  }\r\n`;\r\n\r\nconst getButtonStyles = (props) => {\r\n  if (props.isGoogleSignIn) {\r\n    return googleSignInStyles;\r\n  }\r\n\r\n  return props.inverted ? invertedButtonStyles : buttonStyles;\r\n};\r\n\r\nexport const CustomButtonContainer = styled.button`\r\n  min-width: 165px;\r\n  width: auto;\r\n  height: 50px;\r\n  letter-spacing: 0.5px;\r\n  line-height: 50px;\r\n  padding: 0 35px 0 35px;\r\n  font-size: 15px;\r\n  text-transform: uppercase;\r\n  font-family: \"Open Sans Condensed\";\r\n  font-weight: bolder;\r\n  cursor: pointer;\r\n  display: flex;\r\n  justify-content: center;\r\n\r\n  ${getButtonStyles}\r\n`;\r\n","import React from \"react\";\r\n\r\n// import \"./custom-button.styles.scss\";\r\nimport { CustomButtonContainer } from \"./custom-button.styles\";\r\n\r\n/* \r\n    Both <button> and <input> have property: type=\"submit\" and submit the form.\r\n    It will trigger the \"onSubmit\" method once click on the button/input[submi]\r\n\r\n    Invert the color of the button based on properties: \r\n      `isGoogleSignIn`, `inverted`\r\n    children is for button text\r\n*/\r\n// const CustomButton = ({\r\n//   children,\r\n//   isGoogleSignIn,\r\n//   inverted,\r\n//   ...otherProps\r\n// }) => (\r\n//   <button\r\n//     className={`${inverted ? \"inverted\" : \"\"} ${\r\n//       isGoogleSignIn ? \"google-sign\" : \"\"\r\n//     } custom-button`}\r\n//     {...otherProps}>\r\n//     {children}\r\n//   </button>\r\n// );\r\n\r\nconst CustomButton = ({ children, ...otherProps }) => (\r\n  <CustomButtonContainer {...otherProps}>{children}</CustomButtonContainer>\r\n);\r\n\r\nexport default CustomButton;\r\n","import CartActionTypes from \"./cart.types\";\r\n\r\n/* \r\n  payload is an optional property \r\n  Inside the `reducer`, we're not using it, no need to pass in.\r\n*/\r\nexport const toggleCartHidden = () => ({\r\n  type: CartActionTypes.TOGGLE_CART_HIDDEN,\r\n});\r\n\r\nexport const addItem = (item) => ({\r\n  type: CartActionTypes.ADD_ITEM,\r\n  payload: item,\r\n});\r\n\r\nexport const removeItem = (item) => ({\r\n  type: CartActionTypes.REMOVE_ITEM,\r\n  payload: item,\r\n});\r\n\r\nexport const clearItemFromCart = (item) => ({\r\n  type: CartActionTypes.CLEAR_ITEM_FROM_CART,\r\n  payload: item,\r\n});\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport CustomButton from \"../custom-button/custom-button.component\";\r\nimport { addItem } from \"../../redux/cart/cart.actions\";\r\n\r\nimport \"./collection-item.styles.scss\";\r\n\r\n/* \r\n  Because we need to access the item the `CollectionItem`\r\n  represents to dispatch it into `addItem` function\r\n\r\n    1. Where we use `collection-item` - `collection-preview`\r\n    2. Access the item used in `addItem`\r\n\r\n  `addItem()` allows us to add items into the same array\r\n   anywhere in any component inside the app \r\n*/\r\n\r\nconst CollectionItem = ({ item, addItem }) => {\r\n  const { name, price, imageUrl } = item;\r\n  return (\r\n    <div className='collection-item'>\r\n      <div className='image' style={{ backgroundImage: `url(${imageUrl})` }} />\r\n      <div className='collection-footer'>\r\n        <span className='name'>{name}</span>\r\n        <span className='price'>{`$${price}`}</span>\r\n      </div>\r\n      <CustomButton\r\n        className='custom-button'\r\n        onClick={() => addItem(item)}\r\n        inverted>\r\n        Add to cart\r\n      </CustomButton>\r\n    </div>\r\n  );\r\n};\r\n\r\n/* \r\n  `mapDispatchToProps` provides action dispatching function \r\n  `addItem` as a prop and go inside `CollectionItem` component\r\n  So the component no longer receive `dispatch`\r\n\r\n  Whenever dispatch or call `addItem` function, it will receive\r\n  `item` as a prop, passing into `addItem` action creator, \r\n  return an action object with `payload == item`\r\n  then dispatch the new object into store \r\n\r\n  Now we have access to `addItem` function as a prop \r\n  destructure it inside the component\r\n*/\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  addItem: (item) => dispatch(addItem(item)),\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(CollectionItem);\r\n","import React from \"react\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nimport CollectionItem from \"../collection-item/collection-item.component\";\r\n\r\nimport \"./collection-preview.styles.scss\";\r\n\r\n/* \r\n    Performance concern:\r\n      all anonymous functions inside of any component\r\n      gets called again and re-rendered \r\n      whenever component gets re-rendered.\r\n\r\n    instead of spreading the props of item, \r\n    we need to pass in the whole item\r\n\r\n*/\r\n\r\nconst CollectionPreview = ({ title, items, history, match, routeName }) => (\r\n  <div className='collection-preview'>\r\n    <h1\r\n      className='title'\r\n      onClick={() => history.push(`${match.path}/${routeName}`)}>\r\n      {title.toUpperCase()}\r\n    </h1>\r\n    <div className='preview'>\r\n      {\r\n        /* {items\r\n        .filter((item, index) => index < 4)\r\n        .map(({ id, ...otherItemProps }) => (\r\n          <CollectionItem key={id} {...otherItemProps} />\r\n        ))} */\r\n        items\r\n          .filter((item, index) => index < 4)\r\n          .map((item) => (\r\n            <CollectionItem key={item.id} item={item} />\r\n          ))\r\n      }\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default withRouter(CollectionPreview);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { createStructuredSelector } from \"reselect\";\r\n\r\nimport CollectionPreview from \"../../components/collection-preview/collection-preview.component\";\r\n\r\nimport { selectCollectionsForPreview } from \"../../redux/shop/shop.selectors\";\r\n\r\nimport \"./collections-overview.styles.scss\";\r\n\r\n/*  \r\n    `CollectionPreview` independently decides what it should\r\n    do with the item once it's passed in. --> filter down to 4\r\n\r\n    Alternatively, we can use `selectCollectionsForPreview` to filter\r\n    down to 4 before it is passed in as collecitons array.\r\n\r\n    `collectionPreview` is the one in charge of what should be rendered\r\n    write another selector inside `collectionPreivew`, so that instead of\r\n    passing items directly, like `selectCollection`, pass the actual key it needed\r\n    to get the actual array of items. \r\n*/\r\nconst CollectionsOverview = ({ collections }) => (\r\n  <div className='collections-overview'>\r\n    {collections.map(({ id, ...otherCollectionProps }) => (\r\n      <CollectionPreview key={id} {...otherCollectionProps} />\r\n    ))}\r\n  </div>\r\n);\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n  collections: selectCollectionsForPreview,\r\n});\r\n\r\nexport default connect(mapStateToProps)(CollectionsOverview);\r\n","/* \r\n  Two-levels of wrapping inside the container component\r\n\r\n  `compose`: currying functions together - evaluate from right to left\r\n*/\r\n\r\nimport { connect } from \"react-redux\";\r\nimport { createStructuredSelector } from \"reselect\";\r\nimport { compose } from \"redux\";\r\n\r\nimport { selectIsCollectionFetching } from \"../../redux/shop/shop.selectors\";\r\nimport withSpinner from \"../with-spinner/with-spinner.component\";\r\nimport CollectionsOverview from \"../collections-overview/collections-overview.component\";\r\n\r\n/* \r\n  pass `isLoading` into `withSpinner` HOC wrapping the `CollectionsOverview`\r\n  make sure pass the right prop name `withSpinner` is expecting\r\n*/\r\nconst mapStateToProps = createStructuredSelector({\r\n  isLoading: selectIsCollectionFetching,\r\n});\r\n\r\n// const collectionsOverviewContainer = connect(mapStateToProps)(\r\n//   withSpinner(CollectionsOverview)\r\n// );\r\n\r\nconst CollectionsOverviewContainer = compose(\r\n  connect(mapStateToProps),\r\n  withSpinner\r\n)(CollectionsOverview);\r\n\r\nexport default CollectionsOverviewContainer;\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport CollectionItem from \"../../components/collection-item/collection-item.component\";\r\n\r\nimport { selectCollection } from \"../../redux/shop/shop.selectors\";\r\n\r\nimport \"./collection.styles.scss\";\r\n\r\nconst CollectionPage = ({ collection }) => {\r\n  const { title, items } = collection;\r\n  return (\r\n    <div className='collection-page'>\r\n      <h2 className='title'>{title}</h2>\r\n      <div className='items'>\r\n        {items.map((item) => (\r\n          <CollectionItem key={item.id} item={item} />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n/* \r\n  The first prop: overall state from the top \r\n  The second prop: own props of the component wrapped\r\n  in the `connect`\r\n  \r\n  `selectCollection(ownProps.match.params.collectionId)`\r\n  returns `createSelector()` call and take the `state` as\r\n  parameter and runs through the selection flow. \r\n  This selector needs a part of the state depending on the \r\n  URL parameter\r\n*/\r\nconst mapStateToProps = (state, ownProps) => ({\r\n  collection: selectCollection(ownProps.match.params.collectionId)(state),\r\n});\r\n\r\nexport default connect(mapStateToProps)(CollectionPage);\r\n","import { connect } from \"react-redux\";\r\nimport { createStructuredSelector } from \"reselect\";\r\nimport { compose } from \"redux\";\r\n\r\nimport { selectCollectionsLoaded } from \"../../redux/shop/shop.selectors\";\r\nimport withSpinner from \"../../components/with-spinner/with-spinner.component\";\r\nimport CollectionPage from \"../collection/collection.component\";\r\n\r\n/* \r\n  We need to post-process the return of the function \r\n  `selectCollectionsLoaded`: function reference --> can't invert function\r\n  `selectCollectionsLoaded(state)`: return boolean\r\n*/\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n  isLoading: (state) => !selectCollectionsLoaded(state),\r\n});\r\n\r\nconst CollectionPageContainer = compose(\r\n  connect(mapStateToProps),\r\n  withSpinner\r\n)(CollectionPage);\r\n\r\nexport default CollectionPageContainer;\r\n","import firebase from \"firebase/app\";\r\nimport \"firebase/firestore\";\r\nimport \"firebase/auth\";\r\n\r\nconst config = {\r\n  apiKey: \"AIzaSyCpAM0_0z1n16qOrxSLnb1Gutp-rYnThFM\",\r\n  authDomain: \"crwn-db-d206a.firebaseapp.com\",\r\n  projectId: \"crwn-db-d206a\",\r\n  storageBucket: \"crwn-db-d206a.appspot.com\",\r\n  messagingSenderId: \"258670796916\",\r\n  appId: \"1:258670796916:web:307b397f0752a5277b7121\",\r\n  measurementId: \"G-5M7W1SV97N\",\r\n};\r\n\r\n/* \r\n    Take User Auth object and store in the database\r\n    Asynchronous - make API request\r\n\r\n    If there's no Auth object, meaning user has signed out.\r\n    If exists, query for the document to see if it has already been added.\r\n\r\n    A query is a request that Firestore will return something from the database.\r\n\r\n    There're two types of objects:\r\n      1. references\r\n        represents the \"current\" place in the database that we're querying. \r\n        \r\n        The queryReference object does not have the actual data of the collection or document. \r\n        It instead has properties that tell use details about it, or the method to get the Snapshot object\r\n        which gives us the data we are looking for. \r\n\r\n        Whether to save data to the firestore or get data from this location in the database.\r\n        \r\n        firestore.doc('/users/:userId');\r\n          id/path/parent(collection)\r\n        firesotre.collections('/users')  \r\n      \r\n      2. snapshots \r\n        represents the data\r\n\r\n        documentRef.get() --> documentSnapshot object\r\n          props: exists, id, ...\r\n          The documentSnapshot object allows us to check if a document exists\r\n          at this query using the `.exists` prop which return a boolean.\r\n\r\n          We can also get the actual props by calling the `.data()` which returns\r\n          a JSON object of the document. \r\n          \r\n        collectionRef.get() --> querySnapshot object\r\n\r\n\r\n\r\n        If snapshot doesn't exist, create a new userRef using userAuth.\r\n        So the user is in the firestore now. \r\n    \r\n    Of these objects, they can be either Document or Collection. \r\n\r\n    Firestore will always return us these objects, even if nothing exists at from that query.\r\n    Using this object, we can determine whether or not there's any data there. \r\n    \r\n    DocumentReference & CollectionReference\r\n      documentRef object (`userRef`) is to perform CRUD methods (create, retrieve, update, delete).\r\n      The documentRef methods are .set(), .get(), .update() and .delete().\r\n\r\n      add documents to collections: collectionRef.add({value:prop})\r\n\r\n      snapshotObject: documentRef.get(), collectionRef.get()\r\n        documentRef returns a documentSnapshot object\r\n        collectionRef returns a querySnapshot object\r\n*/\r\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\r\n  if (!userAuth) return;\r\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\r\n  const snapShot = await userRef.get();\r\n\r\n  // const collectionRef = firestore.collection(`users`);\r\n  // const collectionSnapshot = await collectionRef.get();\r\n  // console.log({ collection: collectionSnapshot.docs.map((doc) => doc.data()) });\r\n\r\n  if (!snapShot.exists) {\r\n    const { displayName, email } = userAuth;\r\n    const createAt = new Date();\r\n\r\n    try {\r\n      await userRef.set({\r\n        displayName,\r\n        email,\r\n        createAt,\r\n        ...additionalData,\r\n      });\r\n    } catch (error) {\r\n      console.log(\"error creating user\", error.message);\r\n    }\r\n  }\r\n  return userRef;\r\n};\r\n\r\n/* \r\n  If we start adding documents into the collection that doesn't exist,\r\n  Firebase will create collection and documents inside it.\r\n\r\n  Call this function where we have access to SHOP_DATA --> App.js\r\n  After running it once, we need to remove it since we only \r\n  want to add data automatically. \r\n\r\n  use `documentRef.set()` to add data into documentations\r\n  We can only make one set call at a time, if the Interent stops\r\n  halfway through, we'll have saved half those documents.\r\n\r\n  If any of them fail, we want the whole function to fail,\r\n  so the code is consistent. \r\n  \r\n  `firestore.batcu()`\r\n  Batch all calls into one request \r\n\r\n  `Array.forEach()` is similar to `Array.map()`, but it won't\r\n  return a new array. \r\n  \r\n  `collectionRef.doc()` returns a new document reference in this collection\r\n  and randomly generate ID \r\n\r\n  `batch.commit()` returns a promise:\r\n    when it succeeds, it will return a void (null) value.\r\n*/\r\nexport const addCollectionAndDocuments = async (\r\n  collectionKey,\r\n  objectsToAdd\r\n) => {\r\n  // set Firbase Collections name to `collections`\r\n  const collectionRef = firestore.collection(collectionKey);\r\n\r\n  const batch = firestore.batch();\r\n  objectsToAdd.forEach((obj) => {\r\n    const newDocRef = collectionRef.doc();\r\n    batch.set(newDocRef, obj);\r\n  });\r\n\r\n  return await batch.commit();\r\n};\r\n\r\n/* \r\n  convert documentSnapshot object (snapshot.docs() --> array) into map\r\n  add `routeName` prop\r\n\r\n  transformedCollection = [{routeName, id, title, items}, {}, ...]\r\n\r\n  `encodeURI`: pass in string that can't be read by URI and reformat it \r\n\r\n  `reduce()` will return map: {hats: {}, ...} \r\n*/\r\nexport const convertCollectionsSnapshotToMap = (collectionsSnapshot) => {\r\n  const transformedCollection = collectionsSnapshot.docs.map((docSnapshot) => {\r\n    const { title, items } = docSnapshot.data();\r\n\r\n    return {\r\n      routeName: encodeURI(title.toLowerCase()),\r\n      id: docSnapshot.id,\r\n      title,\r\n      items,\r\n    };\r\n  });\r\n\r\n  return transformedCollection.reduce((accumulator, collection) => {\r\n    accumulator[collection.title.toLowerCase()] = collection;\r\n    return accumulator;\r\n  }, {});\r\n};\r\n\r\nfirebase.initializeApp(config);\r\n\r\nexport const auth = firebase.auth();\r\nexport const firestore = firebase.firestore();\r\n\r\nconst provider = new firebase.auth.GoogleAuthProvider();\r\n// Always trigger the Google popup whenever we use Google Auth provider for authentication\r\nprovider.setCustomParameters({ prompt: \"select_account\" });\r\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\r\n\r\nexport default firebase;\r\n","import ShopActionTypes from \"./shop.types\";\r\n\r\nimport {\r\n  firestore,\r\n  convertCollectionsSnapshotToMap,\r\n} from \"../../firebase/firebase.utils\";\r\n\r\n/* \r\n  Thunk is an actionCreator that returns a function to get the\r\n  dispatch very similar to `mapDispatchToProps`\r\n\r\n  Thunk == dispatch function (dispatch multiple actions)\r\n*/\r\n\r\n// export const updateCollections = (collectionsMap) => ({\r\n//   type: ShopActionTypes.UPDATE_COLLECTIONS,\r\n//   payload: collectionsMap,\r\n// });\r\n\r\n// this reducer is used to switch the `isFetching` to true\r\nexport const fetchCollectionsStart = () => ({\r\n  type: ShopActionTypes.FETCH_COLLECTIONS_START,\r\n});\r\n\r\n/* \r\n  pass into the component to begin the process\r\n\r\n  in the `dispatch` function, put the code that fetch\r\n  shop data from firebase \r\n  \r\n  because of redux-thunk library, redux will instantiate the \r\n  `fetchCollectionsStart()`, and create the `collectionRef` which\r\n  will switch `isFetching` to true and begins the async request:\r\n  fetch the shop data from backend\r\n\r\n  then create `fetchCollectionsSuccess` call to get collectionMap\r\n  once the data comes in, we can dispatch ths success once this \r\n  asynchronous request resolves\r\n\r\n  If redux-thunk middleware is enabled, any time you attempt to \r\n  dispatch a function instead of an object, the middleware will \r\n  call that function with dispatch method itself as the first \r\n  argument.\r\n\r\n  redux thunk is a common pattern for redux to handle asynchronous\r\n  event handling when it comes to having components that depend \r\n  on external API to provide the data\r\n*/\r\n\r\nexport const fetchCollectionsSuccess = (collectionsMap) => ({\r\n  type: ShopActionTypes.FETCH_COLLECTIONS_SUCCESS,\r\n  payload: collectionsMap,\r\n});\r\n\r\nexport const fetchCollectionsFailure = (errorMessage) => ({\r\n  type: ShopActionTypes.FETCH_COLLECTIONS_FAILURE,\r\n  payload: errorMessage,\r\n});\r\n\r\nexport const fetchCollectionsStartAsync = () => {\r\n  return (dispatch) => {\r\n    dispatch(fetchCollectionsStart());\r\n    const collectionRef = firestore.collection(`collections`);\r\n    collectionRef\r\n      .get()\r\n      .then((snapshot) => {\r\n        const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\r\n        dispatch(fetchCollectionsSuccess(collectionsMap));\r\n      })\r\n      .catch((error) => dispatch(fetchCollectionsFailure(error.message)));\r\n  };\r\n};\r\n","import React from \"react\";\r\nimport { Route } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\n// import { createStructuredSelector } from \"reselect\";\r\n\r\n// import { connect } from \"react-redux\";\r\n// import { createStructuredSelector } from \"reselect\";\r\n\r\n// import { selectCollections } from \"../../redux/shop/shop.selectors\";\r\n\r\n// import CollectionPreview from \"../../components/collection-preview/collection-preview.component\";\r\n// import CollectionPage from \"../collection/collection.component\";\r\n// import CollectionsOverview from \"../../components/collections-overview/collections-overview.component\";\r\n// import withSpinner from \"../../components/with-spinner/with-spinner.component\";\r\n\r\nimport CollectionsOverviewContainer from \"../../components/collections-overview/collections-overview.container\";\r\nimport CollectionPageContainer from \"../collection/collection.container\";\r\n\r\nimport { fetchCollectionsStartAsync } from \"../../redux/shop/shop.actions\";\r\n// import {\r\n//   selectIsCollectionFetching,\r\n//   selectCollectionsLoaded,\r\n// } from \"../../redux/shop/shop.selectors\";\r\n\r\n// import {\r\n//   firestore,\r\n//   convertCollectionsSnapshotToMap,\r\n// } from \"../../firebase/firebase.utils\";\r\n\r\n// import { updateCollections } from \"../../redux/shop/shop.actions\";\r\n\r\n/* \r\n  Keep collection data inside shopPage component\r\n  move this into Redux store because we want the\r\n  same data to build `category` page\r\n  In the hatPage, show all the items\r\n*/\r\n// class ShopPage extends React.Component {\r\n//   constructor(props) {\r\n//     super(props);\r\n//     this.state = {\r\n//       collections: SHOP_DATA,\r\n//     };\r\n//   }\r\n\r\n//   render() {\r\n//     const { collections } = this.state;\r\n//     return (\r\n//       <div className='shop-page'>\r\n//         {collections.map(({ id, ...otherCollectionProps }) => (\r\n//           <CollectionPreview key={id} {...otherCollectionProps} />\r\n//         ))}\r\n//       </div>\r\n//     );\r\n//   }\r\n// }\r\n\r\n/* \r\n  `ShopPage` is becoming a simple non-connected component\r\n  Make a `CollectionsOverview` component (child component) to hold `collections`\r\n\r\n  Selectively render inside nested routes\r\n    1. '/shop'\r\n    2. '/shop/:category'\r\n\r\n  Inside `App.js` ShopPage is nested in <Route />, which automatically\r\n  passes three objects to the component `match`, `history` and `location`\r\n  as props \r\n\r\n  now match.path == '/shop'\r\n  We don't know where ShopPage is, we only care about the next path `/:category`\r\n  Not setting the path to `/shop` makes it more flexible if we want to reuse\r\n  it in another place.\r\n\r\n  `params` object brings the `categoryId` info that was passed into the component.\r\n*/\r\n\r\n/* \r\n  Pull `collections` Collection data on the Firestore and store\r\n  in the Redux\r\n\r\n  1. Does the data represent everything needed in order to \r\n    utilize it best for the application?\r\n\r\n    Remove `routeName` prop when importing it into firestore\r\n    It's only relevant to the front-end. (web application only)\r\n    Irrelevant to mobile application\r\n\r\n    Add `routeName` prop back onto the data \r\n  \r\n  2. Where should we put code to fetch the data in Redux?\r\n    `Shop component`\r\n\r\n    Put the code in the nearest ancestor node to only write \r\n    the fetching data one time. \r\n\r\n    When we render the appropriate children we want either have\r\n    that data loaded or in the process of being fetched. \r\n\r\n    The way React renders its component is to mount all of the parent\r\n    components as well. \r\n\r\n\r\n    `componentDidMount()` lifecycle method to perform the actual fetch\r\n    very similar to `App.js` to fetch authenticated user\r\n    \r\n    1. convert funciona component into class component\r\n    2. subscribe to some reference & unsubscribe from it whenever we \r\n      unmount the component\r\n\r\n        An open messaging system between the app and Firebase\r\n        Whenever any changes occur on Firebase, \r\n        it will send out the message that status has changed \r\n\r\n      Also needs to close it on unmount in case of memory leaks\r\n\r\n        snapshot is the `collections` array on the firestore\r\n\r\n        `onSnapshot()` whenever the collectionRef updates or it runs\r\n        for the first time, it will send the snapshot representing the \r\n        `collections` snapshot object with `doc` array. \r\n\r\n        Also add `routeName` into `doc` array\r\n    3. store `collectionMap` into shop Reducer\r\n        create new action type and creator: `UPDATE_COLLECTIONS`\r\n\r\n*/\r\n\r\n// const ShopPage = ({ match }) => (\r\n//   <div className='shop-page'>\r\n//     <Route exact path={`${match.path}`} component={CollectionsOverview} />\r\n//     <Route path={`${match.path}/:collectionId`} component={CollectionPage} />\r\n//   </div>\r\n// );\r\n\r\n/* \r\n  set `isLoading` to boolean\r\n  where to use `withSpinner` component?\r\n    it takes a component as an argument and returns `WrappedComponent` \r\n    when the loading is false.\r\n\r\n    `CollectionsOverview` & `CollectionPage` need to know whether\r\n    it is loading. \r\n\r\n    render the component inside <Route> and pass the loading prop in \r\n    the state \r\n    use `render` func which has access to all the route props and it\r\n    gives access to `collection` component with `match` inside the \r\n    selector to pull off proper collection. \r\n\r\n\r\n*/\r\n\r\n// const CollectionsOverviewWithSpinner = withSpinner(CollectionsOverview);\r\n// const CollectionPageWithSpinner = withSpinner(CollectionPage);\r\n\r\n/* \r\n  -------------------- Promise Pattern --------------------\r\n    1. firstore.collection + return promises \r\n      `collectionRef.get()`: make an API call to fetch back the \r\n      data associated to the collection\r\n        similar to what `onSnapshot()` has got from the backend \r\n\r\n      .then(): pass in snapshot transformation \r\n\r\n      The only time we'll get the new data from the firebase is when \r\n      we remount the shop component because we're no longer leveraging\r\n      the live updates style that the observer pattern use with `onSnapshot`\r\n    \r\n    2. native fetch\r\n      use firebase as API - accessible by URL \r\n\r\n  -------------------- Redux Asynchronous Event Handling --------------------\r\n    Now we're handling the asynchronous natural of fetching data inside\r\n    the `ShopPage` component: get the data and update the informtion.\r\n    \r\n    Have this code inside a Redux action that will handle all of the \r\n    asynchronous nature and then fire the event.\r\n\r\n    Why do we want to move the logic out of `componentDidMount`?\r\n      There's a chance that we need to fetch data from the backend, store it in \r\n      a reducer somewhere else in the application. \r\n\r\n      For example, if we never go to `/shop` page, the collections is null. \r\n      The action only gets fired when shop component mounts for the first time. \r\n      \r\n      We don't need to rewrite the code in another component \r\n      Also don't want to move it to top-level App component because we're rendering \r\n      too much data once the initial application mounts.\r\n\r\n    Move it and `loading` state into an asynchronous redux action\r\n\r\n    -------------------- One error --------------------\r\n    The async method is put inside the `componentDidMount()`, which is rendered after\r\n    the inital render call. When the first render call gets called on the shop component, \r\n    `isFetchingCollections` is using the default value `false` and pass it into \r\n    <CollectionPageWithSpinner>. It will cause not to render the spinner and instead redner \r\n    the wrapped component (loading is false). \r\n\r\n    <CollectionsOverview>: `selectCollectionsForPreview` returns an empty array\r\n                            initially render map of an empty array --> fine\r\n                            We can afford to let this component render first, then\r\n                            fetch collections, and then fetch the page again with the \r\n                            updated collections arra.\r\n\r\n    <CollectionPage>: `selectCollection` returns null\r\n                      destructure the title of a null object --> produce error\r\n                      We can't afford to let this component render first because we can't\r\n                      destructure the null object. \r\n\r\n    When collection component is initialized, it expects collections in order to actaully\r\n    render --> use a different selector rather than check whether or not the collection\r\n    is being fetched. \r\n\r\n    Anti-pattern:\r\n      We don't want to move API requests out of the lifecycle method that occurs before \r\n      componentDidMount, which is the `constructor()`.  \r\n\r\n      Whenever a dispatch occurs, it triggers any connected component to re-render\r\n\r\n    check whether or not the collections value is loaded. --> isCollectionsLoaded\r\n\r\n    if `isCollectionsLoaded` is false, `isloading` is true \r\n\r\n    -------------------- Pollute ShopPage component --------------------\r\n    Inside the ShopPage component, we're passing in two props where we get the loading \r\n    and fetching state from `shop` reducers in order to pass into HOC components. \r\n    However we do nothing with these props. --> Put them into isolated environment.\r\n\r\n    Those components are in charge of whether or not they need to be loaded. \r\n\r\n    `ShopPage` component only needs to create and initialize the asynchronous request\r\n    to fetch the data and render the component on its routes\r\n*/\r\n\r\nclass ShopPage extends React.Component {\r\n  // state = {\r\n  //   loading: true,\r\n  // };\r\n\r\n  // unsubscribeFromSnapshot = null;\r\n\r\n  componentDidMount() {\r\n    // const { updateCollections } = this.props;\r\n    // const collectionRef = firestore.collection(`collections`);\r\n    // 1. Observer pattern\r\n    /*     this.unsubscribeFromSnapshot = collectionRef.onSnapshot((snapshot) => {\r\n      const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\r\n      // store it into Redux state\r\n      updateCollections(collectionsMap);\r\n      this.setState({ loading: false });\r\n    }); */\r\n    // 2. Promise pattern\r\n    // collectionRef.get().then((snapshot) => {\r\n    //   const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\r\n    //   updateCollections(collectionsMap);\r\n    //   this.setState({ loading: false });\r\n    // });\r\n    // 3. Fetch pattern - really nested objects\r\n    /*     fetch(\r\n      \"https://firestore.googleapis.com/v1/projects/crwn-db-d206a/databases/(default)/documents/collections\"\r\n    )\r\n      .then((response) => response.json())\r\n      .then((collections) => console.log(collections)); */\r\n\r\n    const { fetchCollectionsStartAsync } = this.props;\r\n    fetchCollectionsStartAsync();\r\n  }\r\n\r\n  render() {\r\n    // const { match, isFetchingCollections, isCollectionsLoaded } = this.props;\r\n    // const { loading } = this.state;\r\n    const { match } = this.props;\r\n    return (\r\n      <div className='shop-page'>\r\n        <Route\r\n          exact\r\n          path={`${match.path}`}\r\n          // render={(props) => (\r\n          //   <CollectionsOverviewWithSpinner\r\n          //     isLoading={isFetchingCollections}\r\n          //     {...props}\r\n          //   />\r\n          // )}\r\n          component={CollectionsOverviewContainer}\r\n        />\r\n        <Route\r\n          path={`${match.path}/:collectionId`}\r\n          // render={(props) => (\r\n          //   <CollectionPageWithSpinner\r\n          //     isLoading={!isCollectionsLoaded}\r\n          //     {...props}\r\n          //   />\r\n          // )}\r\n          component={CollectionPageContainer}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// const mapStateToProps = createStructuredSelector({\r\n//   isFetchingCollections: selectIsCollectionFetching,\r\n//   isCollectionsLoaded: selectCollectionsLoaded,\r\n// });\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  fetchCollectionsStartAsync: () => dispatch(fetchCollectionsStartAsync()),\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(ShopPage);\r\n// export default connect(mapStateToProps, mapDispatchToProps)(ShopPage);\r\n\r\n// const mapDispatchToProps = (dispatch) => ({\r\n//   updateCollections: (collectionsMap) =>\r\n//     dispatch(updateCollections(collectionsMap)),\r\n// });\r\n\r\n// export default connect(null, mapDispatchToProps)(ShopPage);\r\n\r\n// const mapStateToProps = createStructuredSelector({\r\n//   collections: selectCollections,\r\n// });\r\n\r\n// export default connect(mapStateToProps)(ShopPage);\r\n","import React from \"react\";\r\n\r\nimport \"./form-input.styles.scss\";\r\n\r\n/* \r\n    handleChange - bubble up any change the input has \r\n\r\n    label props - selectively render the label\r\n      If a label is generated, it will always have the className 'form-input-label'.\r\n      But 'shrink' property depends on whether the user types \r\n*/\r\n\r\nconst FormInput = ({ handleChange, label, ...otherFormProps }) => (\r\n  <div className='group'>\r\n    <input className='form-input' onChange={handleChange} {...otherFormProps} />\r\n    {label ? (\r\n      <label\r\n        className={`${\r\n          otherFormProps.value.length ? \"shrink\" : \"\"\r\n        } form-input-label`}>\r\n        {label}\r\n      </label>\r\n    ) : null}\r\n  </div>\r\n);\r\n\r\nexport default FormInput;\r\n","import React from \"react\";\r\n\r\nimport FormInput from \"../form-input/form-input.component\";\r\nimport CustomButton from \"../custom-button/custom-button.component\";\r\n\r\nimport { auth, signInWithGoogle } from \"../../firebase/firebase.utils\";\r\n\r\nimport \"./sign-in.styles.scss\";\r\n\r\nclass SignIn extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      email: \"\",\r\n      password: \"\",\r\n    };\r\n  }\r\n\r\n  /* \r\n    Form has the default HTML form behavior:\r\n      browsing to a new page when user submits the form\r\n\r\n    Form can be a Controlled component\r\n  */\r\n\r\n  handleSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    const { email, password } = this.state;\r\n\r\n    try {\r\n      await auth.signInWithEmailAndPassword(email, password);\r\n      this.setState({ email: \"\", password: \"\" });\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  /* \r\n      event.target: get input element\r\n\r\n      value = this.state value\r\n        Since `handleChange` runs on every keystroke to update the React state,\r\n        value will update as the user types\r\n      \r\n      Compotued property names: {[name]: value}\r\n        It allows to put an expression in [], that will be computed and used \r\n        as the property name. \r\n         \r\n  */\r\n\r\n  handleChange = (event) => {\r\n    const { value, name } = event.target;\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className='sign-in'>\r\n        <h2>I already have an account</h2>\r\n        <span>Sign in with your email and password</span>\r\n\r\n        <form onSubmit={this.handleSubmit}>\r\n          <FormInput\r\n            name='email'\r\n            type='email'\r\n            value={this.state.email}\r\n            handleChange={this.handleChange}\r\n            label='Email'\r\n            required\r\n          />\r\n\r\n          <FormInput\r\n            name='password'\r\n            type='password'\r\n            value={this.state.password}\r\n            handleChange={this.handleChange}\r\n            label='Password'\r\n            required\r\n          />\r\n          <div className='buttons'>\r\n            <CustomButton type='submit'>Sign in</CustomButton>\r\n            <CustomButton\r\n              type='button'\r\n              onClick={signInWithGoogle}\r\n              isGoogleSignIn>\r\n              Sign in with Google\r\n            </CustomButton>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SignIn;\r\n","import React from \"react\";\r\n\r\nimport FormInput from \"../form-input/form-input.component\";\r\nimport CustomButton from \"../custom-button/custom-button.component\";\r\n\r\nimport { auth, createUserProfileDocument } from \"../../firebase/firebase.utils\";\r\n\r\nimport \"../sign-up/sign-up.styles.scss\";\r\n\r\n/* \r\n    auth.createUserWithEmailAndPassword() will create a new user account \r\n    and returns a userAuth object\r\n\r\n    createUserProfileDocument() \r\n\r\n    After putting userAuth properties into users collection inside database, \r\n    clear the form\r\n*/\r\n\r\nclass SignUp extends React.Component {\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      displayName: \"\",\r\n      email: \"\",\r\n      password: \"\",\r\n      confirmPassword: \"\",\r\n    };\r\n  }\r\n\r\n  handleSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    const { displayName, email, password, confirmPassword } = this.state;\r\n\r\n    if (password !== confirmPassword) {\r\n      alert(\"Passwords don't match\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const { user } = await auth.createUserWithEmailAndPassword(\r\n        email,\r\n        password\r\n      );\r\n      await createUserProfileDocument(user, { displayName });\r\n\r\n      this.setState({\r\n        displayName: \"\",\r\n        email: \"\",\r\n        password: \"\",\r\n        confirmPassword: \"\",\r\n      });\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  handleChange = (event) => {\r\n    const { name, value } = event.target;\r\n\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  render() {\r\n    const { displayName, email, password, confirmPassword } = this.state;\r\n    return (\r\n      <div className='sign-up'>\r\n        <h2 className='title'>I do not have an account </h2>\r\n        <span>Sign up with your email andpassword</span>\r\n        <form className='sign-up-form' onSubmit={this.handleSubmit}>\r\n          <FormInput\r\n            type='text'\r\n            name='displayName'\r\n            value={displayName}\r\n            onChange={this.handleChange}\r\n            label='Display Name'\r\n            required\r\n          />\r\n          <FormInput\r\n            type='email'\r\n            name='email'\r\n            value={email}\r\n            onChange={this.handleChange}\r\n            label='Email'\r\n            required\r\n          />\r\n          <FormInput\r\n            type='password'\r\n            name='password'\r\n            value={password}\r\n            onChange={this.handleChange}\r\n            label='Password'\r\n            required\r\n          />\r\n          <FormInput\r\n            type='password'\r\n            name='confirmPassword'\r\n            value={confirmPassword}\r\n            onChange={this.handleChange}\r\n            label='Confirm Password'\r\n            required\r\n          />\r\n          <CustomButton type='submit'>SIGN UP</CustomButton>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SignUp;\r\n","import React from \"react\";\r\n\r\nimport SignIn from \"../../components/sign-in/sign-in.component\";\r\nimport SignUp from \"../../components/sign-up/sign-up.component\";\r\n\r\nimport \"./sign-in-and-sign-up.styles.scss\";\r\n\r\nconst SignInAndSignUpPage = () => (\r\n  <div className='sign-in-and-sign-up'>\r\n    <SignIn />\r\n    <SignUp />\r\n  </div>\r\n);\r\n\r\nexport default SignInAndSignUpPage;\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport {\r\n  addItem,\r\n  removeItem,\r\n  clearItemFromCart,\r\n} from \"../../redux/cart/cart.actions\";\r\n\r\nimport \"./checkout-item.styles.scss\";\r\n\r\n/* \r\n  pass the whole cartItem instead of spreading\r\n  all the props because we want to increase\r\n  or decrease the quantity\r\n\r\n  UTF-8 Wingdings\r\n\r\n  By destructuring object like this, we're going\r\n  into one-layer deep, so we don't have access\r\n  to `cartItem` object itself\r\n  { cartItem: { name, imageUrl, quantity, price } }\r\n\r\n  arrows to increase (addItem) or decrease (removeItem)\r\n  `removeItem()` = decrease quantity + remove items\r\n*/\r\nconst CheckoutItem = ({ cartItem, addItem, removeItem, clearItem }) => {\r\n  const { name, imageUrl, quantity, price } = cartItem;\r\n  return (\r\n    <div className='checkout-item'>\r\n      <div className='image-container'>\r\n        <img src={imageUrl} alt='item' />\r\n      </div>\r\n      <span className='name'>{name}</span>\r\n      <span className='quantity'>\r\n        <div className='arrow' onClick={() => removeItem(cartItem)}>\r\n          &#10094;\r\n        </div>\r\n        <span className='value'>{quantity}</span>\r\n        <div className='arrow' onClick={() => addItem(cartItem)}>\r\n          &#10095;\r\n        </div>\r\n      </span>\r\n      <span className='price'>{price}</span>\r\n      <div className='remove-button' onClick={() => clearItem(cartItem)}>\r\n        &#10005;\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  addItem: (item) => dispatch(addItem(item)),\r\n  removeItem: (item) => dispatch(removeItem(item)),\r\n  clearItem: (item) => dispatch(clearItemFromCart(item)),\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(CheckoutItem);\r\n","import React from \"react\";\r\nimport StripeCheckout from \"react-stripe-checkout\";\r\n\r\n/* \r\n  Stripe wants the price in cents\r\n  `token` is the success callback when we trigger the submission\r\n  with `token` it can be passed into the backend and create the charge\r\n*/\r\nconst StripeCheckoutButton = ({ price }) => {\r\n  const priceForStripe = price * 100;\r\n  const publishablekey =\r\n    \"pk_test_51IPEoTK9mdhXwDoQvt2iTYsMqkWMMYAeg3sNUCIaz6UuJf1ffZkO8RWvvTaJOHwVJBcmtnhpyvKYHqphQkY692VN00xux3z5hY\";\r\n  const onToken = (token) => {\r\n    console.log(token);\r\n    alert(\"Payment Successful!\");\r\n  };\r\n  return (\r\n    <StripeCheckout\r\n      label='Pay Now'\r\n      name='CRWN Clothing Ltd.'\r\n      billingAddress\r\n      shippingAddress\r\n      image='https://svgshare.com/i/CUz.svg'\r\n      description={`Your total is $${price}`}\r\n      amount={priceForStripe}\r\n      panelLabel='Pay Now'\r\n      token={onToken}\r\n      stripeKey={publishablekey}\r\n    />\r\n  );\r\n};\r\n\r\nexport default StripeCheckoutButton;\r\n","import { createSelector } from \"reselect\";\r\n\r\n/* \r\n  inputSelector: doesn't use `createSelector`\r\n  outputSelector: use `createSelector` and `inputSelector`\r\n*/\r\n\r\n/* \r\n  inputSelector: select`Slice`\r\n    take the whole state and returns one-layer deep slice\r\n*/\r\nconst selectCart = (state) => state.cart;\r\n\r\n/* \r\n  outputSelector: select`Prop`\r\n    first argument: a collection(array) of inputSelector\r\n    second argument: a function takes the Selector value (in order)\r\n    and returns the value we want\r\n*/\r\n\r\nexport const selectCartItems = createSelector(\r\n  [selectCart],\r\n  (cart) => cart.cartItems\r\n);\r\n\r\nexport const selectCartHidden = createSelector(\r\n  [selectCart],\r\n  (cart) => cart.hidden\r\n);\r\n\r\nexport const selectCartItemsCount = createSelector(\r\n  [selectCartItems],\r\n  (cartItems) =>\r\n    cartItems.reduce(\r\n      (accumalatedQuantity, cartItem) =>\r\n        accumalatedQuantity + cartItem.quantity,\r\n      0\r\n    )\r\n);\r\n\r\nexport const selectCartTotal = createSelector([selectCartItems], (cartItems) =>\r\n  cartItems.reduce(\r\n    (accumalatedTotal, cartItem) =>\r\n      accumalatedTotal + cartItem.quantity * cartItem.price,\r\n    0\r\n  )\r\n);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { createStructuredSelector } from \"reselect\";\r\n\r\nimport CheckoutItem from \"../../components/checkout-item/checkout-item.component\";\r\nimport StripeCheckoutButton from \"../../components/stripe-button/stripte-button.component\";\r\n\r\nimport {\r\n  selectCartItems,\r\n  selectCartTotal,\r\n} from \"../../redux/cart/cart.selectors\";\r\n\r\nimport \"./checkout.styles.scss\";\r\n\r\nconst CheckoutPage = ({ cartItems, total }) => (\r\n  <div className='checkout-page'>\r\n    <div className='checkout-header'>\r\n      <div className='header-block'>\r\n        <span>Product</span>\r\n      </div>\r\n      <div className='header-block'>\r\n        <span>Description</span>\r\n      </div>\r\n      <div className='header-block'>\r\n        <span>Quantity</span>\r\n      </div>\r\n      <div className='header-block'>\r\n        <span>Price</span>\r\n      </div>\r\n      <div className='header-block'>\r\n        <span>Remove</span>\r\n      </div>\r\n    </div>\r\n    {cartItems.map((cartItem) => (\r\n      <CheckoutItem key={cartItem.id} cartItem={cartItem} />\r\n    ))}\r\n    <div className='total'>\r\n      <span>TOTAL: ${total}</span>\r\n    </div>\r\n    <div className='test-warning'>\r\n      *Please use the following test credit card for payment*\r\n      <br />\r\n      4242 4242 4242 4242 - Exp: 12/21 - CVV: 123\r\n    </div>\r\n    <StripeCheckoutButton price={total} />\r\n  </div>\r\n);\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n  cartItems: selectCartItems,\r\n  total: selectCartTotal,\r\n});\r\n\r\nexport default connect(mapStateToProps)(CheckoutPage);\r\n","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nvar _ref2 = /*#__PURE__*/React.createElement(\"g\", null);\n\nvar _ref3 = /*#__PURE__*/React.createElement(\"g\", null);\n\nvar _ref4 = /*#__PURE__*/React.createElement(\"g\", null);\n\nvar _ref5 = /*#__PURE__*/React.createElement(\"g\", null);\n\nvar _ref6 = /*#__PURE__*/React.createElement(\"g\", null);\n\nvar _ref7 = /*#__PURE__*/React.createElement(\"g\", null);\n\nvar _ref8 = /*#__PURE__*/React.createElement(\"g\", null);\n\nvar _ref9 = /*#__PURE__*/React.createElement(\"g\", null);\n\nvar _ref10 = /*#__PURE__*/React.createElement(\"g\", null);\n\nvar _ref11 = /*#__PURE__*/React.createElement(\"g\", null);\n\nvar _ref12 = /*#__PURE__*/React.createElement(\"g\", null);\n\nvar _ref13 = /*#__PURE__*/React.createElement(\"g\", null);\n\nvar _ref14 = /*#__PURE__*/React.createElement(\"g\", null);\n\nvar _ref15 = /*#__PURE__*/React.createElement(\"g\", null);\n\nvar _ref16 = /*#__PURE__*/React.createElement(\"g\", null);\n\nfunction SvgShoppingBag(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, [\"title\", \"titleId\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    id: \"Capa_1\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    x: \"0px\",\n    y: \"0px\",\n    viewBox: \"0 0 407.453 407.453\",\n    style: {\n      enableBackground: \"new 0 0 407.453 407.453\"\n    },\n    xmlSpace: \"preserve\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      fill: \"#010002\"\n    },\n    d: \"M255.099,116.515c4.487,0,8.129-3.633,8.129-8.129c0-4.495-3.642-8.129-8.129-8.129H143.486 c-4.487,0-8.129,3.633-8.129,8.129c0,4.495,3.642,8.129,8.129,8.129H255.099z\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      fill: \"#010002\"\n    },\n    d: \"M367.062,100.258H311.69c-4.487,0-8.129,3.633-8.129,8.129c0,4.495,3.642,8.129,8.129,8.129h47.243 v274.681H48.519V116.515h44.536c4.487,0,8.129-3.633,8.129-8.129c0-4.495-3.642-8.129-8.129-8.129H40.391 c-4.487,0-8.129,3.633-8.129,8.129v290.938c0,4.495,3.642,8.129,8.129,8.129h326.671c4.487,0,8.129-3.633,8.129-8.129V108.386 C375.191,103.891,371.557,100.258,367.062,100.258z\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      fill: \"#010002\"\n    },\n    d: \"M282.59,134.796c4.487,0,8.129-3.633,8.129-8.129V67.394C290.718,30.238,250.604,0,201.101,0 c-49.308,0-89.414,30.238-89.414,67.394v59.274c0,4.495,3.642,8.129,8.129,8.129s8.129-3.633,8.129-8.129V67.394 c0-28.198,32.823-51.137,73.36-51.137c40.334,0,73.157,22.939,73.157,51.137v59.274 C274.461,131.163,278.095,134.796,282.59,134.796z\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      fill: \"#010002\"\n    },\n    d: \"M98.892,147.566c0,11.526,9.389,20.907,20.923,20.907c11.534,0,20.923-9.38,20.923-20.907 c0-4.495-3.642-8.129-8.129-8.129s-8.129,3.633-8.129,8.129c0,2.561-2.089,4.65-4.666,4.65c-2.569,0-4.666-2.089-4.666-4.65 c0-4.495-3.642-8.129-8.129-8.129S98.892,143.071,98.892,147.566z\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      fill: \"#010002\"\n    },\n    d: \"M282.59,168.473c11.534,0,20.923-9.38,20.923-20.907c0-4.495-3.642-8.129-8.129-8.129 c-4.487,0-8.129,3.633-8.129,8.129c0,2.561-2.089,4.65-4.666,4.65c-2.577,0-4.666-2.089-4.666-4.65 c0-4.495-3.642-8.129-8.129-8.129c-4.487,0-8.129,3.633-8.129,8.129C261.667,159.092,271.055,168.473,282.59,168.473z\"\n  })), _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9, _ref10, _ref11, _ref12, _ref13, _ref14, _ref15, _ref16);\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgShoppingBag);\nexport default __webpack_public_path__ + \"static/media/shopping-bag.a688874f.svg\";\nexport { ForwardRef as ReactComponent };","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { createStructuredSelector } from \"reselect\";\r\n\r\nimport { toggleCartHidden } from \"../../redux/cart/cart.actions\";\r\n\r\nimport { ReactComponent as ShoppingIcon } from \"../../assets/shopping-bag.svg\";\r\n\r\nimport { selectCartItemsCount } from \"../../redux/cart/cart.selectors\";\r\n\r\nimport \"./cart-icon.styles.scss\";\r\n\r\n/* \r\n  The returned object of the `mapDispatchToProps` function \r\n  will be merged to connected components as props. \r\n  Call them directly to dispatch its action.\r\n*/\r\nconst CartIcon = ({ toggleCartHidden, itemCount }) => (\r\n  <div className='cart-icon' onClick={toggleCartHidden}>\r\n    <ShoppingIcon className='shopping-icon' />\r\n    <span className='item-count'>{itemCount}</span>\r\n  </div>\r\n);\r\n\r\n/* \r\n  Selector: use `mapStateToProps` to pull the state in and get a slice of value\r\n    display the number of items in the cart inside the cart icon\r\n    array.reducer() to accumulate the total number\r\n    pass `itemCount` parameter into CartIcon component\r\n    computing a new value based off the whole state\r\n\r\n  Whenever any reducer updates, it will always return a new object,\r\n  Redux re-composes and re-bulids the entire state objects.\r\n  \r\n  `mapStateToProps` has a shallow equality check for every value in the object,\r\n    shallow equality check:\r\n      primitive value - two values are equal?\r\n      object value - reference not the value inside\r\n\r\n  Since `itemCount` prop is a primitive value, if they're the same, \r\n  no new props will be passed into `cartIcon` component.\r\n  \r\n  Thus, `cartIcon` will not rerender if unrelated redux state \r\n  like `currrentUser` changes occur. \r\n\r\n  Memorization: the caching of the selectors value\r\n  `Reselect` library - it won't pass the same prop value into component, \r\n                        React component won't re-render\r\n\r\n  Even BEFORE reselect, changes to unrelated redux state will NOT\r\n  re-render `CartIcon` since `itemCount` is a primitive value.\r\n  However, if a selector were creating new objects/arrays, \r\n  it will help prevent unnecessary re-renders.\r\n\r\n  In this scenario, reselect only helped with unnecessary computations\r\n  from array.reduce function since `CartItems` passed in didn't change.\r\n\r\n  Move this into `cart.selectors.js`\r\n  It needs to pass the whole state:\r\n    selectCartItemsCount --> selectCartItems --> selectCart --> state\r\n*/\r\nconst mapStateToProps = createStructuredSelector({\r\n  itemCount: selectCartItemsCount,\r\n});\r\n\r\n// merge `toggleCarHidden` props to Redux state\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  toggleCartHidden: () => dispatch(toggleCartHidden()),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CartIcon);\r\n","import React from \"react\";\r\n\r\nimport \"./cart-item.styles.scss\";\r\n\r\nconst CartItem = ({ item: { imageUrl, name, price, quantity } }) => (\r\n  <div className='cart-item'>\r\n    <img src={imageUrl} alt='item' />\r\n    <div className='item-details'>\r\n      <span className='name'>{name}</span>\r\n      <span className='price'>\r\n        {quantity} x ${price}\r\n      </span>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default CartItem;\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { createStructuredSelector } from \"reselect\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nimport CustomButton from \"../custom-button/custom-button.component\";\r\nimport CartItem from \"../cart-item/cart-item.component\";\r\nimport { selectCartItems } from \"../../redux/cart/cart.selectors\";\r\nimport { toggleCartHidden } from \"../../redux/cart/cart.actions\";\r\n\r\nimport \"./cart-dropdown.styles.scss\";\r\n\r\n/* \r\n  Conditionally render a empty message basd off `CartItem` length\r\n\r\n  `==`: loose evaluation - check the value and it will coherce the type\r\n  `===`: strict evaluation - check both value and type\r\n  false: 0, false, '', undefined, null, NaN\r\n\r\n  In order to go to the checkout page, we need to open the cart dropdown and \r\n  click the button. Once we get into the page, the dropdown still opens.\r\n  We're displaying the same information to the user.\r\n  Trigger a toggle whenever we click `GO TO CHECKOUT` to toggle the `hidden` state\r\n  (false --> true)\r\n\r\n  How we used to do is to write `mapDispatchToProps` and pass in `dispatch` \r\n  a actionCreator `toggleCartHidden`\r\n\r\n  connect actually passes `dispatch` into the component as a prop if we \r\n  don't supply the second argument to `connect`\r\n\r\n  instead of writing another `mapDispathToProps`, bring in `dispatch`\r\n  prop into component\r\n*/\r\n\r\nconst CartDropdown = ({ cartItems, history, dispatch }) => (\r\n  <div className='cart-dropdown'>\r\n    <div className='cart-items'>\r\n      {cartItems.length ? (\r\n        cartItems.map((cartItem) => (\r\n          <CartItem key={cartItem.id} item={cartItem} />\r\n        ))\r\n      ) : (\r\n        <span className='empty-message'>Your cart is empty</span>\r\n      )}\r\n    </div>\r\n    <CustomButton\r\n      onClick={() => {\r\n        history.push(\"/checkout\");\r\n        dispatch(toggleCartHidden());\r\n      }}>\r\n      GO TO CHECKOUT\r\n    </CustomButton>\r\n  </div>\r\n);\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n  cartItems: selectCartItems,\r\n});\r\n\r\n/* \r\n  All higher-order components return components, \r\n  but also take component as the argument\r\n\r\n  Access `history` and the closest `<Route>'s match`\r\n  via the `withRouter` higher-order component.\r\n  It will pass updated `match`, `location`, and `history`\r\n  props to the wrapped component whenever it renders.\r\n*/\r\nexport default withRouter(connect(mapStateToProps)(CartDropdown));\r\n","import { createSelector } from \"reselect\";\r\n\r\nconst selectUser = (state) => state.user;\r\n\r\nexport const selectCurrentUser = createSelector(\r\n  [selectUser],\r\n  (user) => user.currentUser\r\n);\r\n","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nvar _ref2 = /*#__PURE__*/React.createElement(\"desc\", null, \"Created with Sketch.\");\n\nvar _ref3 = /*#__PURE__*/React.createElement(\"g\", {\n  id: \"WiP\",\n  stroke: \"none\",\n  strokeWidth: 1,\n  fill: \"none\",\n  fillRule: \"evenodd\"\n}, /*#__PURE__*/React.createElement(\"g\", {\n  id: \"Artboard\",\n  transform: \"translate(-90.000000, -38.000000)\"\n}, /*#__PURE__*/React.createElement(\"g\", {\n  id: \"Group\",\n  transform: \"translate(90.000000, 38.000000)\"\n}, /*#__PURE__*/React.createElement(\"polygon\", {\n  id: \"Rectangle\",\n  fill: \"#808282\",\n  points: \"3 14 25 26.5 47 14 40.855176 39 9.08421785 39\"\n}), /*#__PURE__*/React.createElement(\"polygon\", {\n  id: \"Triangle\",\n  fillOpacity: 0.262838724,\n  fill: \"#101A1A\",\n  points: \"25 8 40 39 10 39\"\n}), /*#__PURE__*/React.createElement(\"circle\", {\n  id: \"Oval\",\n  fill: \"#5E6363\",\n  cx: 2,\n  cy: 9,\n  r: 2\n}), /*#__PURE__*/React.createElement(\"circle\", {\n  id: \"Oval\",\n  fill: \"#5E6363\",\n  cx: 25,\n  cy: 2,\n  r: 2\n}), /*#__PURE__*/React.createElement(\"circle\", {\n  id: \"Oval\",\n  fill: \"#5E6363\",\n  cx: 48,\n  cy: 9,\n  r: 2\n}))));\n\nfunction SvgCrown(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, [\"title\", \"titleId\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: \"50px\",\n    height: \"39px\",\n    viewBox: \"0 0 50 39\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title === undefined ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, \"Group\") : title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _ref2, _ref3);\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgCrown);\nexport default __webpack_public_path__ + \"static/media/crown.3a4e2b15.svg\";\nexport { ForwardRef as ReactComponent };","// import styled, { css } from \"styled-components\";\r\nimport styled from \"styled-components\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\n// write css block like shared function\r\n// const OptionContainerStyles = css`\r\n//   padding: 10px 15px;\r\n//   cursor: pointer;\r\n// `;\r\n\r\nexport const HeaderContainer = styled.div`\r\n  height: 70px;\r\n  width: 100%;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  margin-bottom: 25px;\r\n`;\r\n\r\n// Implement <Link> element --> styled()\r\nexport const LogoContainer = styled(Link)`\r\n  height: 100%;\r\n  width: 70px;\r\n  padding: 25px;\r\n`;\r\n\r\nexport const OptionsContainer = styled.div`\r\n  width: 50%;\r\n  height: 100%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: flex-end;\r\n`;\r\n\r\n// <div className='option'> and <Link className='option'> share the same style\r\n// export const OptionLink = styled(Link)`\r\n//   ${OptionContainerStyles}\r\n// `;\r\n\r\n// export const OptionDiv = styled.div`\r\n//   ${OptionContainerStyles}\r\n// `;\r\n\r\nexport const OptionLink = styled(Link)`\r\n  padding: 10px 15px;\r\n  cursor: pointer;\r\n`;\r\n","import React from \"react\";\r\n// import { Link } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport { createStructuredSelector } from \"reselect\";\r\n\r\nimport { auth } from \"../../firebase/firebase.utils\";\r\nimport CartIcon from \"../cart-icon/cart-icon.component\";\r\nimport CartDropdown from \"../cart-dropdown/cart-dropdown.component\";\r\nimport { selectCartHidden } from \"../../redux/cart/cart.selectors\";\r\nimport { selectCurrentUser } from \"../../redux/user/user.selectors\";\r\n\r\nimport { ReactComponent as Logo } from \"../../assets/crown.svg\";\r\n\r\n// import \"./header.styles.scss\";\r\nimport {\r\n  HeaderContainer,\r\n  LogoContainer,\r\n  OptionsContainer,\r\n  OptionLink,\r\n} from \"./header.styles\";\r\n\r\n/* \r\n    SVG - Scalable vactor graphics\r\n\r\n    bring userReducer as currentUser into Header Component which gets currentUser from App.js\r\n    Header Component needs to pull currentUser from userReducer \r\n\r\n    connect is a higher-order component which meodifies component related to Redux\r\n    \r\n    higher-order component is a component that takes components as arguments and \r\n    return a souped up component \r\n      first function (mapStateToProps) - access the state of rootReducer --> the currentUser value\r\n      second function - component \r\n      get null as currentUser and being passed in -- sign out\r\n\r\n      mapStateToProps will be used anythere we need the property of the state\r\n\r\n\r\n    styled-component:\r\n      If the only difference between style components is what type of base element (Link or div) it\r\n      needs to return, instead of using CSS block, add `as='div' or as={component}`\r\n*/\r\n\r\nconst Header = ({ currentUser, hidden }) => (\r\n  <HeaderContainer>\r\n    <LogoContainer to='/'>\r\n      <Logo className='logo'></Logo>\r\n    </LogoContainer>\r\n    <OptionsContainer>\r\n      <OptionLink to='/shop'>SHOP</OptionLink>\r\n      <OptionLink to='/contact'>CONTACT</OptionLink>\r\n      {currentUser ? (\r\n        <OptionLink\r\n          as='div'\r\n          onClick={() => {\r\n            auth.signOut();\r\n          }}>\r\n          SIGN OUT\r\n        </OptionLink>\r\n      ) : (\r\n        <OptionLink to='/signin'>SIGN IN</OptionLink>\r\n      )}\r\n      <CartIcon />\r\n    </OptionsContainer>\r\n    {hidden ? null : <CartDropdown />}\r\n  </HeaderContainer>\r\n);\r\n\r\n// const mapStateToProps = ({ user: { currentUser }, cart: { hidden } }) => ({\r\n//   currentUser,\r\n//   hidden,\r\n// });\r\n\r\n// const mapStateToProps = (state) => ({\r\n//   currentUser: selectCurrentUser(state),\r\n//   hidden: selectCartHidden(state),\r\n// });\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n  currentUser: selectCurrentUser,\r\n  hidden: selectCartHidden,\r\n});\r\n\r\nexport default connect(mapStateToProps)(Header);\r\n","import React from \"react\";\nimport { Switch, Route, Redirect } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { createStructuredSelector } from \"reselect\";\n\nimport \"./App.css\";\n\nimport HomePage from \"./pages/homepage/homepage.component\";\nimport ShopPage from \"./pages/shop/shop.component\";\nimport SignInAndSignUpPage from \"./pages/sign-in-and-sign-up/sign-in-and-sign-up.component\";\nimport CheckoutPage from \"./pages/checkout/checkout.component\";\n\nimport Header from \"./components/header/header.component\";\n\nimport {\n  auth,\n  createUserProfileDocument,\n  // addCollectionAndDocuments,\n} from \"./firebase/firebase.utils\";\n\n// import action creater\nimport { setCurrentUser } from \"./redux/user/user.actions\";\nimport { selectCurrentUser } from \"./redux/user/user.selectors\";\n// import { selectCollectionsForPreview } from \"./redux/shop/shop.selectors\";\n\n/* \n  -------------------- Route --------------------  \n    Parameters of Route component:\n      1. exact - {true / false} - true: exactly the path \n      2. path - sub url from current page (https://localhost:3000)\n      3. component - render \n\n    <Switch>\n      <Route> inside find a match, it only renders the exact route. [exclusively]\n\n    Only have access to first component passed to Route - HomePage\n      S1: pass the \"history\" props deep down to the component \n          Bad solution! prop drilling / prop tunnelling \n          Children in between don't actually need the \"history\" property\n          other than pass it to their children.\n      \n          S2: {withRouter} - higher order component \n          Function: take a component as an argument and return a modified component\n          e.g. MenuItem is a function which takes props to render component \n          \n          power up component with props: location, match and history\n\n      Place <Header /> outside of <Switch>\n      Header will always present\n\n    <Route render> method\n      Instead of having a new React element created using\n      `component` prop, pass in a function to be called \n      when the location mathces.  \n\n    <Redirect> \n      Navigate to a new location.\n\n      <Route exact path=\"/\">\n        {loggedIn ? <Redirect to=\"/dashboard\" />: <PublicHomePage>}\n      </Route>\n\n    -------------------- Firebase --------------------    \n    Firebase Auth - persistent session\n      Normally how to fetch the data inside of the App is to fire a fetch \n      to the backend inside componentDidMount()\n      \n      Once the code calls fetch, it won't call fetch again \n      until a ComponentDidMount() gets called again. \n\n      Just want Firebase to realize the authentication state has changed\n        auth is an observer gets called whenever the user's sign-in state changes\n        auth.onAuthStateChanged() will give information about the sign-in user\n\n    Open subscription system\n      An open messaging system between the app and Firebase\n      Whenever any changes occur on Firebase, \n      it will send out the message that Auth status has changed \n\n      Also needs to close it on unmount in case of memory leaks\n\n    How to store authenticated user into database?\n      make async call to make API request to get back from Auth library\n\n      Useful properties of userAuth object:\n        1. displayName\n        2. email\n        3. uid - dynamically generated ID string \n\n      Put userAuth properties into users collection inside database\n    \n    Also store the data in the \"state\" of the application to be used\n      use userAuth to check if the database has updated   \n      \n      userRef.onSnapshot()\n      It will send a snapshot object representing the data that is currently \n      stored in the database.\n\n      `setCurrentUser` actionCreator method to set `currentUser` object\n      in the current Redux state\n\n      If a user signs in we'll check if they're actually signed in with `userAuth`\n        If there is we will get back userRef from `createUserProfileDocument` method\n          If there is a document we will get back the userRef\n          If there is no document we will create a new document and still get back the userRef\n        \n        Then listen to userRef for any changes to data\n        But will also get back the first state of data\n        use data to `setState`\n      \n      If user signed out, set currentUser to Null.\n\n    setState is asynchronous\n      We pass a second function as a parameter in setState \n\n    -------------------- Redux --------------------\n    update App Component to update the userReducer value with setCurrentUser\n    App doesn't need currentUser anymore - it only sets it without doing anything to it \n    first function:\n      first argument: No need for mapStateToProps - set null \n      second argument: mapDispatchToProps - setCurrentUser\n                      setCurrentUser is a dispatch  function and returns user object \n                      Redux knows the object being passed in is an action object \n                      needs to be passed to every Reducer \n\n    Redux-logger: the state of Redux after any action gets fired \n\n    -------------------- Redirect --------------------\n*/\n\nclass App extends React.Component {\n  // constructor() {\n  //   super();\n  //   this.state = {\n  //     currentUser: null,\n  //   };\n  // }\n  unsubscribeFromAuth = null;\n\n  /* \n    -------------------- Observer Pattern --------------------\n      Function that get passed into `onAuthStateChanged` is `next` call in\n      the observer\n        Whenever a value comes in, we run the function \n        we can also add `error` call, but `complete` call rarely happens \n        in the firebase because it is a live database, meaning that updates\n        can always happen\n      \n      `AuthStateChange` is the stream of events, firebase sends the user\n      login or logout information in a continuous stream. \n\n      Why we set unsubscribe?\n        Technically speaking, subscription never ends because this stream is \n        always open. And the listener `auth.onAuthStateChanged` always listens \n        to the event. \n        If the component unmounts, we don't care about the listener anymore, \n        we have to unsubscribe from it. \n        \n        Firebase allows us to get back and unsubscribe -- eliminate the listener\n        It destorys the subscription reference and the observable continues\n\n      Observable can have multiple observers \n\n    -------------------- Promise Pattern --------------------\n    `shop.component.jsx`\n*/\n\n  componentDidMount() {\n    // const { setCurrentUser, collectionsArray } = this.props;\n    const { setCurrentUser } = this.props;\n    this.unsubscribeFromAuth = auth.onAuthStateChanged(async (userAuth) => {\n      if (userAuth) {\n        const userRef = await createUserProfileDocument(userAuth);\n        userRef.onSnapshot((snapShot) => {\n          // this.setState({\n          //   currentUser: {\n          //     id: snapShot.id,\n          //     ...snapShot.data(),\n          //   },\n          // });\n          setCurrentUser({\n            id: snapShot.id,\n            ...snapShot.data(),\n          });\n        });\n      } else {\n        // this.setState({currentuser: userAuth});\n        setCurrentUser(userAuth);\n        // addCollectionAndDocuments(\n        //   \"collections\",\n        //   // returns {title, items:[]}\n        //   collectionsArray.map(({ title, items }) => ({ title, items }))\n        // );\n      }\n    });\n  }\n\n  componentWillUnmount() {\n    this.unsubscribeFromAuth();\n  }\n\n  render() {\n    return (\n      <div>\n        <Header />\n        <Switch>\n          <Route exact path='/' component={HomePage} />\n          <Route path='/shop' component={ShopPage} />\n          <Route exact path='/checkout' component={CheckoutPage} />\n          <Route\n            exact\n            path='/signin'\n            render={() =>\n              this.props.currentUser ? (\n                <Redirect to='/' />\n              ) : (\n                <SignInAndSignUpPage />\n              )\n            }\n          />\n        </Switch>\n      </div>\n    );\n  }\n}\n\n/* \n  If there's a current user in the application, the user shouldn't\n  access the sign-in page.\n\n  Get `currentUser` from the Redux store\n  \n  `mapStateToProps`\n  It is used for selecting the part of the data from the store that\n  the connected component needs. \n  The result is a plain object, \n  which will be merged into the wrapped component's props. \n*/\nconst mapStateToProps = createStructuredSelector({\n  currentUser: selectCurrentUser,\n  // collectionsArray: selectCollectionsForPreview,\n});\n\n/* \n  `mapDispatchToProps` function returns a plain object:\n    field: becomes a saperate prop for component\n    value: a function that dispatches an aciton when called\n\n  Action object created by `actionCreator()` passing in `dispatch()`\n  this object will be passed to every reducer \n*/\n\n// dispatching actions returned by action creator (user.actions.js)\nconst mapDispatchToProps = (dispatch) => ({\n  setCurrentUser: (user) => dispatch(setCurrentUser(user)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","/* \r\n    Action creator - function\r\n    implement right actions to app \r\n    so Redux can store value of user into userReducer \r\n\r\n    create action (action.type & action.payload) to triggle the correct case\r\n    inside switch statement and set currentUser inside userReducer as payload object \r\n    return objects \r\n\r\n    name type string like this: `domain/eventName`\r\n\r\n    user: userAuth in App.js\r\n\r\n*/\r\n\r\nimport UserActionTypes from \"./user.types\";\r\n\r\n// action creator\r\nexport const setCurrentUser = (user) => ({\r\n  type: UserActionTypes.SET_CURRENT_USER,\r\n  payload: user,\r\n});\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { Provider } from \"react-redux\";\nimport { PersistGate } from \"redux-persist/integration/react\";\n\nimport { store, persistor } from \"./redux/store\";\n\nimport \"./index.css\";\nimport App from \"./App\";\n\n/* \n  put new components here that we get from React redux\n  give access to app state and reducer\n\n  Provider is a component that is the parent of everything inside the application\n  the entire application will have access to the store object\n  the store is where to put all Redux code\n\n  Wrap the application inside <PersistGate> so it can access the\n  presistence flow itself. \n    1. receive the store\n    2. fire off the actions that will rehydrate the state \n      whenever the application refreshes\n*/\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <BrowserRouter>\n        <PersistGate persistor={persistor}>\n          <App />\n        </PersistGate>\n      </BrowserRouter>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}